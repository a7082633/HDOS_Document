<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
    <title>内部测试版本</title>

    <script type="text/javascript">
		
	var SavePath = "C:\\CardSave.xml";

    //你好
	var fso = new ActiveXObject("Scripting.FileSystemObject");
   	var obj = new ActiveXObject("BHGX_CardActiveX.CardProcess.1");
	     loadXML = function(xmlString){
         var xmlDoc=null;
        //判断浏览器的类型
        //支持IE浏览器 
        if(!window.DOMParser && window.ActiveXObject){   //window.DOMParser 判断是否是非ie浏览器
             var xmlDomVersions = ['MSXML.2.DOMDocument.6.0','MSXML.2.DOMDocument.3.0','Microsoft.XMLDOM'];
            for(var i=0;i<xmlDomVersions.length;i++){
                try{
                     xmlDoc = new ActiveXObject(xmlDomVersions[i]);
                     xmlDoc.async = false;
                     xmlDoc.loadXML(xmlString); //loadXML方法载入xml字符串
                    break;
                 }catch(e){
                 }
             }
         }
        //支持Mozilla浏览器
        else if(window.DOMParser && document.implementation && document.implementation.createDocument){
            try{
                /* DOMParser 对象解析 XML 文本并返回一个 XML Document 对象。
                  * 要使用 DOMParser，使用不带参数的构造函数来实例化它，然后调用其 parseFromString() 方法
                  * parseFromString(text, contentType) 参数text:要解析的 XML 标记 参数contentType文本的内容类型
                  * 可能是 "text/xml" 、"application/xml" 或 "application/xhtml+xml" 中的一个。注意，不支持 "text/html"。
                 */
                 domParser = new   DOMParser();
                 xmlDoc = domParser.parseFromString(xmlString, 'text/xml');
             }catch(e){
             }
         }
        else{
            return null;
         }

        return xmlDoc;
     }
     
     function GetDateDiffBySeconds(sTime, eTime) {

        //作为除数的数字
        var divNum = 1000;
        return parseInt((eTime.getTime() - sTime.getTime()) / parseInt(divNum));
    }


  //对xml对象进行判断
     checkXMLDocObj = function(xmlString){
         var xmlDoc = loadXML(xmlString);
        if(xmlDoc==null){
             alert('您的浏览器不支持xml文件读取,于是本页面禁止您的操作,推荐使用IE5.0以上可以解决此问题!');
            //window.location.href='某某地址(比如首页)';
         }
        return xmlDoc;
     }
     
     		    //参数1:控件id号,参数2:理解为定位节点
     initializeSelect = function(printerXML){
         var xmlDoc = checkXMLDocObj(printerXML);
         var n;
         var l;
         var Sel = document.getElementById("PrinterList");  //得到下拉列表框控件
        if(Sel != null){
             n = xmlDoc.getElementsByTagName("PrinterName");
             l = n.length;
            //循环添加列表子项
            for(var i=0;i<l;i++){
                 var Option=document.createElement("OPTION"); 
                 Option.value = n[i].getAttribute("NAME");
                 Option.text = n[i].getAttribute("NAME");
                 Sel.options.add(Option);
             }
         }
     }



	function GetFileContent(filepath)
	{
		var text;
		try{
		    var file = fso.OpenTextFile(filepath, 1, false, 0); 
		    text = file.ReadAll();
			file.close(); 
		}catch(e){
			alert(e);
		}
		return text;
	}
	
   function GetVersion()
   {
        try {
            var ver=obj.iATLGetCardVersion();
            var info = "version=[" + ver + "]";
            alert(info);
        }  catch (e) {
            alert(e);
        }
    }
	
    function CardInit() {
        try {		
		    var ret = obj.iATLCardInit();
		    if (ret != 0) {
			    var strErr = obj.iATLerr();
			    alert(strErr);
		    } else {
			    alert("系统初始化成功");
		    }
	    } catch (e) {
		    alert(e);
	    }
    }
    
    function CardDeinit()
	{
	    try{
			var ret = obj.iATLCardDeinit();
			if (ret != 0) {
		   		var strErr = obj.iATLerr();
				alert(strErr);
		   } else{
		   		alert("系统关闭");
           }
		}catch(e){
			alert(a);
		}
	}
	
	function CardOpen()
	{
		try{
			var ret = obj.iATLCardOpen();
			if (ret != 0){
		   		var strErr = obj.iATLerr();
				alert(strErr);
		    }else{
		   		alert("打开设备成功");
            }
		}catch(e){
			alert(a);
		}
	}
	
	function CardClose()
	{
		try{
		    var ret = obj.iATLCardClose();
			if (ret != 0) {
		   		var strErr = obj.iATLerr();
				alert(strErr);
		    }else{
		   		alert("关闭设备成功");
            }
		}catch(e){
			alert(a);
		}
	}

	function ScanCard()
	{
		try{
			var ret = obj.iATLScanCard();
	        if (ret != 0){
		   		var strErr = obj.iATLerr();
				alert(strErr);
		    }else{
	   		    alert("寻卡成功");
            }
		}catch(e){}
	}
	
    function ScanCardXML()
	{
		try{
			var ret = obj.iATLScanCardXML();
			alert(ret);
		}catch(e){
		    alert(e);
		}
	}
		
	function  CardIsEmpty()
	{
		try{
		    var ret = obj.iATLCardIsEmpty();
		    if (ret != 0) {
		        var strErr = obj.iATLerr();
				alert(strErr);
		    } else {
		        alert("卡是空卡");
		    }
		}catch(e){
		    alert(e);
		}
	}
	
    function Read() {
        try {
			var ID=document.getElementsByName("ReadText")[0].value;
			if (ID == "" || typeof(ID) == "undefined"){
				alert("请选择卡要查询的ID号");
				return;
			}
            var OutXML=obj.iATLReadInfo(ID);
            alert(OutXML);
			var filesave = fso.createtextfile(SavePath, true, false);
			 filesave.Write(OutXML);
			filesave.close();
        } catch(e){
            alert(e);
        }
    }
    
    function ReadSEQ() {
    	try {
            var OutXML=obj.iATLReadCardSEQ();
            alert(OutXML);
			var filesave = fso.createtextfile(SavePath, true, false);
			filesave.Write(OutXML);
			filesave.close();
        } catch(e){
            alert(e);
        }
    }
        
    function ReadBlood() {
        try {
            var OutXML=obj.iATLReadOnlybloodbank();
            alert(OutXML);
			var filesave = fso.createtextfile(SavePath, true, false);
			filesave.Write(OutXML);
			filesave.close();
        } catch(e){
            alert(e);
        }
    }
    
    
    function ReadClinicInfo() 
    {
        try{
        	var ID=document.getElementsByName("CodeText")[0].value;
            var OutXML=obj.iATLReadClinicInfo(ID);
            alert(OutXML);
        }catch(e){
            alert(e);
        }
    }
    
    function ReadMedicalInfo() 
    {
        try {
            var ID=document.getElementsByName("CodeText")[0].value;
            var OutXML=obj.iATLReadMedicalInfo(ID);
            alert(OutXML);
        } catch(e) {
            alert(e);
        }
    }
    
    function ReadFeeInfo() 
    {
        try{
            var ID=document.getElementsByName("CodeText")[0].value;
            var OutXML=obj.iATLReadFeeInfo(ID);
            alert(OutXML);
        } catch(e) {
            alert(e);
        }
    }
    
    function ReadClinicInfoLog() 
    {
        try{
        	var ID=document.getElementsByName("CodeText")[0].value;
        	var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadClinicInfoLog(ID, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML)
        }catch(e){
            alert(e);
        }
    }
    
    function ReadMedicalInfoLog() 
    {
        try {
            var ID=document.getElementsByName("CodeText")[0].value;
             var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadMedicalInfoLog(ID, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);
        } catch(e) {
            alert(e);
        }
    }
    
    function ReadFeeInfoLog() 
    {
        try{
            var ID=document.getElementsByName("CodeText")[0].value;
            var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadFeeInfoLog(ID, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);
        } catch(e) {
            alert(e);
        }
    }
    
    function ReadClinicInfoLocal() 
    {
        try{
        	var ID=document.getElementsByName("CodeText")[0].value;
        	var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadClinicInfoLocal(ID, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);
        }catch(e){
            alert(e);
        }
    }
    
    function ReadMedicalInfoLocal() 
    {
        try {
            var ID=document.getElementsByName("CodeText")[0].value;
             var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            starttime = new Date();
            var OutXML=obj.iATLReadMedicalInfoLocal(ID, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);
        } catch(e) {
            alert(e);
        }
    }
    
    function ReadFeeInfoLocal() 
    {
        try{
            var ID=document.getElementsByName("CodeText")[0].value;
            var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            var starttime = new Date();
            var OutXML=obj.iATLReadFeeInfoLocal(ID, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);
        } catch(e) {
            alert(e);
        }
    }
    
    function ReadOnlyHIS() {
        try {
            var starttime = new Date();
            var OutXML=obj.iATLReadOnlyHIS();
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML)
        } catch(e){
            alert(e);
        }
    }
    function ReadOnlyHISLocal() {
        try {
            var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadOnlyHISLocal(content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);
        } catch(e){
            alert(e);
        }
    }
      
   function ReadOnlyHISLog() {
        try {
            var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadOnlyHISLog(content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);
        } catch(e){
            alert(e);
        }
    }
    
    function ReadHIS() {
        try{
        	var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == ""){
				alert("请输入服务器URL");
				return;
			}
  
	        var RegPath = document.getElementsByName("RegXML")[0].value;
	       
			if (RegPath == ""){
				alert("请选择校验的WSDL路径");
				return;
			}
            var OutXML=obj.iATLReadHISInfo(RegPath, CardPath);
            alert(OutXML);
        } catch(e) {
            alert(e);
        }
    }
    
    function ReadHISLocal() {
        try{
        	var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == ""){
				alert("请输入服务器URL");
				return;
			}
  
	        var RegPath = document.getElementsByName("RegXML")[0].value;
	       
			if (RegPath == ""){
				alert("请选择校验的WSDL路径");
				return;
			}
			
			var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadHISInfoLocal(RegPath, CardPath, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);
        } catch(e) {
            alert(e);
        }
    }
    
    function ReadHISLog() {
        try{
        	var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == ""){
				alert("请输入服务器URL");
				return;
			}
  
	        var RegPath = document.getElementsByName("RegXML")[0].value;
	       
			if (RegPath == ""){
				alert("请选择校验的WSDL路径");
				return;
			}
			
			var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadHISInfoLog(RegPath, CardPath, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);
        } catch(e) {
            alert(e);
        }
    }
    
      function ReadXJLocal() {
        try{
            var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == ""){
				alert("请输入服务器URL");
				return;
			}
  
	        var RegPath = document.getElementsByName("RegXML")[0].value;
	       
			if (RegPath == ""){
				alert("请选择校验的WSDL路径");
				return;
			}
			
			var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadInfoForXJLocal(RegPath, CardPath, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);

        }catch(e){
            alert(e);
        }
    }
    
     function ReadXJLog() {
        try{
            var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == ""){
				alert("请输入服务器URL");
				return;
			}
  
	        var RegPath = document.getElementsByName("RegXML")[0].value;
	       
			if (RegPath == ""){
				alert("请选择校验的WSDL路径");
				return;
			}
			
			var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var OutXML=obj.iATLReadInfoForXJLog(RegPath, CardPath, content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + OutXML);

        }catch(e){
            alert(e);
        }
    }
    
    function ReadXJ() {
        try{
            var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == ""){
				alert("请输入服务器URL");
				return;
			}
  
	        var RegPath = document.getElementsByName("RegXML")[0].value;
	       
			if (RegPath == ""){
				alert("请选择校验的WSDL路径");
				return;
			}
            var OutXML=obj.iATLReadInfoForXJ(RegPath, CardPath);
            alert(OutXML);

        }catch(e){
            alert(e);
        }
    }


    function QueryInfo() {
        try {
			var str = document.getElementsByName("Source")[0].value;
			if (str != ""){
			    var xml = obj.iATLQueryInfo(str);
        		alert(xml);
			}

        } catch (e) {
            alert(e);
        }
    }

    function WriteInfo() {
     try {
			var CardPath=document.getElementsByName("WriteXML")[0].value;
			if (CardPath == "" || typeof(CardPath) == "undefined"){
				alert("请选择写卡的XML文件");
				return;
			}
			
			var TestXML = GetFileContent(CardPath);
            var ret = obj.iATLWriteInfo(TestXML);
            var info = "WriteInfo = [" + TestXML + "]";
           if (ret != 0){
		   		var strErr = obj.iATLerr();
				alert(strErr);
		   }else{
		   		alert("写卡数据成功");
        	}
        }catch (e) {
            alert(e);
        }
    }
    
  function WriteBlood() {
     try {
			var CardPath=document.getElementsByName("WriteXML")[0].value;
			if (CardPath == "" || typeof(CardPath) == "undefined"){
				alert("请选择写卡的XML文件");
				return;
			}
			
			var TestXML = GetFileContent(CardPath);
            var ret = obj.iATLWritebloodbank(TestXML);
            var info = "WriteInfo = [" + TestXML + "]";
           if (ret != 0){
		   		var strErr = obj.iATLerr();
				alert(strErr);
		   }else{
		   		alert("写卡数据成功");
        	}
        }catch (e) {
            alert(e);
        }
    }
    
   function WriteHospInfo() {
        try {
			var CardPath=document.getElementsByName("WriteXML")[0].value;
			if (CardPath == "" || typeof(CardPath) == "undefined"){
				alert("请选择写卡的XML文件");
				return;
			}
			var TestXML = GetFileContent(CardPath);
            var ret = obj.iATLWriteHospInfo(TestXML);
            var info = "WriteHospInfo = [" + TestXML + "]";
            if (ret != 0){
		   		var strErr = obj.iATLerr();
				alert(strErr);
		    }else{
		   		alert("写卡数据成功");
        	}
        }catch (e) {
            alert(e);
        }
    }

   function WriteHospInfoLog() {
        try {
			var CardPath=document.getElementsByName("WriteXML")[0].value;
			if (CardPath == "" || typeof(CardPath) == "undefined"){
				alert("请选择写卡的XML文件");
				return;
			}
			var TestXML = GetFileContent(CardPath);
			var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var ret = obj.iATLWriteHospInfoLog(TestXML, content);
            var info = "WriteHospInfoLog = [" + TestXML + "]";
            if (ret != 0){
		   		var strErr = obj.iATLerr();
				alert(strErr);
		    }else{
		   		alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + "写卡数据成功");
        	}
        }catch (e) {
            alert(e);
        }
    }
    
       function WriteHospInfoLocal() {
        try {
			var CardPath=document.getElementsByName("WriteXML")[0].value;
			if (CardPath == "" || typeof(CardPath) == "undefined"){
				alert("请选择写卡的XML文件");
				return;
			}
			var TestXML = GetFileContent(CardPath);
			var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var ret = obj.iATLWriteHospInfoLocal(TestXML, content);
            var info = "WriteHospInfoLocal = [" + TestXML + "]";
            if (ret != 0){
		   		var strErr = obj.iATLerr();
				alert(strErr);
		    }else{
		        alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + "写卡数据成功");
        	}
        }catch (e) {
            alert(e);
        }
    }
    
	function CreateCard()
	{
		try{
			var CardPath=document.getElementsByName("CardDataXML")[0].value;
			if (CardPath == "" || typeof(CardPath) == "undefined"){
				alert("请选择创建卡XML文件");
				return;
			}
			var TestXML = GetFileContent(CardPath);
			var ret = obj.iATLCreateCard(TestXML);
            var info = "CreateCard = [" + CreateCard + "]";
            
           if (ret != 0){
		   		var strErr = obj.iATLerr();
				alert(strErr);
		   }else{
		   		alert("制卡成功");
       		 }
		}catch(e){
			alert(e);
		}
	}
	
	function PrintCard()
	{
		try{
		    var List = document.getElementById("PrinterList");
		    var PrinterName = List.options[List.selectedIndex].value;
		    if (PrinterName == "")
		    {
		      alert("请选择打印机");
		    }
		   
			var CardPath=document.getElementsByName("CardCoverDataXML")[0].value;
			if(CardPath=="")
			{
				alert("请选择打印卡面的文件");
				return;
			}
		
			var strCardCover = GetFileContent(CardPath);
			CardPath=document.getElementsByName("CardCoverStyleXML")[0].value;
			if(CardPath=="")
			{
				alert("请选择打印卡面的文件");
				return;
			}
			var strCoverStyle = GetFileContent(CardPath);
			var ret = obj.iATLPrintCard(PrinterName, strCardCover, strCoverStyle);
            
           if (ret != 0)
		   {
		   		var strErr = obj.iATLerr();
				alert(strErr);
		   }
		   else
		   	{
		   		alert("打印成功");
		   	}
		}
		catch(e){
			alert(e);
		}
	}
	
	function PatchCard()
	{
		try{
		    var List = document.getElementById("PrinterList");
		    var PrinterName = List.options[List.selectedIndex].value;
		    if (PrinterName == "")
		    {
		      alert("请选择打印机");
		    }
			var CardPath=document.getElementsByName("CardDataXML")[0].value;
			
			if(CardPath=="")
			{
				alert("请选择制卡的文件");
				return;
			}
			var strCardData = GetFileContent(CardPath);
			
			CardPath=document.getElementsByName("CardCoverDataXML")[0].value;
			
			if(CardPath=="")
			{
				alert("请选择打印卡面的文件");
				return;
			}
			
			var strCardCover = GetFileContent(CardPath);
			CardPath=document.getElementsByName("CardCoverStyleXML")[0].value;
			if(CardPath == "")
			{
				alert("请选择打印卡面的文件");
				return;
			}
			
			var strCoverStyle = GetFileContent(CardPath);
			var ret = obj.iATLPatchCard(strCardData, strCardCover, PrinterName, strCoverStyle);
				            
           if (ret != 0)
		   {
		   		var strErr = obj.iATLerr();
				alert(strErr);
		   }
		   else
		   	{
		   		alert("制卡并打印成功");
		   	}
		}
		catch(e){
			alert(e);
		}
	}
	
	function CardFormat()
	{
		try {
				var ret = obj.iATLFormatCard();
				if(ret != 0)
				{
					var strErr = obj.iATLerr();
					alert(strErr);
				}
				else
					{
						alert("格式化卡成功");
					}
	
			} catch (e) {
				alert(e);
			
			}
	}
	
	function CardFormatHosp()
	{
		try {
				var ret = obj.iATLFormatHospInfo();
				if(ret != 0)
				{
					var strErr = obj.iATLerr();
					alert(strErr);
				}
				else
					{
						alert("格式化卡成功");
					}
	
			} catch (e) {
				alert(e);
			
			}
	}

	
	function CardCheck()
	{
	    try{
	        
	        var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == "")
			{
				alert("请输入服务器URL");
				return;
			}
  
	    var RegPath = document.getElementsByName("RegXML")[0].value;
	       
			if (RegPath == "")
			{
				alert("请选择校验的WSDL路径");
				return;
			}
      
			var ret = obj.iATLCheckMsgForNH(RegPath, CardPath);
			alert(ret);
	    }catch(e) {
	        alert(e);
	    }
		
	}
	
	function CardForbiddenCheck()
	{
	    try { 
		    var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var ret = obj.iATLCheckMsgForNHLocal(content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + ret);
        } catch (e) {
            alert(e)
        }
	}
	
	function NHReadOnly()
	{
		try{
			var ret = obj.iATLReadOnlyCardMessageForNH();
			alert(ret);
		}catch(e) {
			alert(e)
		}
	}
	
	
    function NHRead()
	{
		try{
	        
	        var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == "")
			{
				alert("请输入服务器URL");
				return;
			}
			
			var RegPath = document.getElementsByName("RegXML")[0].value;
			if (RegPath == "")
			{
				alert("请选择校验的WSDL路径");
				return;
			}

            starttime = new Date();
			var ret = obj.iATLReadCardMessageForNH(RegPath, CardPath);
			alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + ret);
	    }catch(e) {
	        alert(e);
	    }
	}
	
	function NHReadLog()
	{
		try{
	        
	        var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == "")
			{
				alert("请输入服务器URL");
				return;
			}
			
			var RegPath = document.getElementsByName("RegXML")[0].value;
			if (RegPath == "")
			{
				alert("请选择校验的WSDL路径");
				return;
			}
			
			
			var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);

            starttime = new Date();
			var ret = obj.iATLReadCardMessageForNHLog(RegPath, CardPath, content);
			alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + ret);
	    }catch(e) {
	        alert(e);
	    }
	}
	function NHReadLocal()
	{
	    try { 
		    var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);
            
            var starttime = new Date();
            var ret = obj.iATLReadCardMessageForNHLocal(content);
            alert('用时: ' + GetDateDiffBySeconds(starttime, new Date()) + 's\n' + ret);
        } catch (e) {
            alert(e)
        }
	}
	
	function ReadConfigInfo()
	{
	    try{
	        
  
	    var RegPath = document.getElementsByName("ConfigXML")[0].value;
	       
			if (RegPath == "")
			{
				alert("选择配置项");
				return;
			}
      
			var ret = obj.iATLReadConfigMsg(RegPath);
			alert(ret);
	    }catch(e) {
	        alert(e);
	    }
	}
	
	function CardRegister()
	{
			    try{
	        
	        var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == "")
			{
				alert("请输入服务器URL");
				return;
			}

			var ret = obj.iATLRegMsgForNH(CardPath);
			alert(ret);
	    }catch(e) {
	        alert(e);
	    }
	}
	
		function CardRegisterLog()
	{
			    try{
	        
	        var CardPath=document.getElementsByName("URL")[0].value;
	        if (CardPath == "")
			{
				alert("请输入服务器URL");
				return;
			}
			
			var logConf = document.getElementsByName("LogXML")[0].value;
            if (logConf == "") {
                alert("请选择日志参数xml");
                return;
            }
            content = GetFileContent(logConf);

			var ret = obj.iATLRegMsgForNHLog(CardPath, content);
			alert(ret);
	    }catch(e) {
	        alert(e);
	    }
	}
	function EncryFile()
	{
	    try{
	        
	        var CardPath=document.getElementsByName("JM_SOURCE")[0].value;
	        if (CardPath == "")
			{
				alert("请选择需要加密的文件");
				return;
			}

			var ret = obj.iATLEncryFile(CardPath);
			if (0 == ret)
			{
			    alert("加密文件成功");
			}
			else
			{
			    alert("加密文件失败");
			}
	    }catch(e) {
	        alert(e);
	    }
	}

     
	function GetPrinterList()
	{
		try{
		    var list = obj.iATLGetPrinterList();
		    initializeSelect(list);
		}
		catch(e)
		{
		    alert(e);
		}
	}

    </script>

</head>
<body>
    <input type="button" value="获取版本号" onclick="GetVersion()" /><hr />
    <input type="button" value="系统初始化" onclick="CardInit()" />
    <input type="button" value="系统关闭" onclick="CardDeinit()" />
    <input type="button" value="打开卡" onclick="CardOpen()" />
    <input type="button" value="关闭卡" onclick="CardClose()" /><hr />
    <input type="button" value="寻卡" onclick="ScanCard()" />
    <input type="button" value="寻卡XML" onclick="ScanCardXML()" />
    <input type="button" value="判卡为空" onclick="CardIsEmpty()" />
    <input type="button" value="格式化卡" onclick="CardFormat()" />
    <input type="button" value="格式化卡医院信息(CPU)" onclick="CardFormatHosp()" /><hr />
    <input type="text" name="ReadText" />
    <input type="button" value="读卡数据" onclick="Read()" />
    <input type="button" value="读卡序列号" onclick="ReadSEQ()" />
    <input type="button" value="读卡血量标记数据(16K)" onclick="ReadBlood()" /><hr />
    请输入医院代码:<input type="text" name="CodeText" /><hr/>
    <input type="button" value="门诊摘要(CPU)" onclick="ReadClinicInfo()" />  
    <input type="button" value="病案首页(CPU)" onclick="ReadMedicalInfo()" />  
    <input type="button" value="费用结算(CPU)" onclick="ReadFeeInfo()" /><hr />
    日志配置文件选择:<input type="file" name="LogXML" /><hr />
    <input type="button" value="门诊摘要+日志" onclick="ReadClinicInfoLog()" />  
    <input type="button" value="病案首页+日志" onclick="ReadMedicalInfoLog()" />  
    <input type="button" value="费用结算+日志" onclick="ReadFeeInfoLog()" /><hr />
    <input type="button" value="门诊摘要+黑名单校验" onclick="ReadClinicInfoLocal()" />  
    <input type="button" value="病案首页+黑名单校验" onclick="ReadMedicalInfoLocal()" />  
    <input type="button" value="费用结算+黑名单校验" onclick="ReadFeeInfoLocal()" /><hr />
    加密文件选择:<input type="file" name="JM_SOURCE" />
    <input type="button" value="加密文件" onclick="EncryFile()" />
    <hr />
    <input type="text" name="Source" />
    <input type="button" value="查询字段数据" onclick="QueryInfo()" /><hr />
    写卡文件选择:<input type="file" name="WriteXML" />
    <input type="button" value="写数据" onclick="WriteInfo()" /><hr/>
    <input type="button" value="写血量标记(16K)" onclick="WriteBlood()" />
    <input type="button" value="写医院数据(CPU)" onclick="WriteHospInfo()" />
    <input type="button" value="写医院数据+日志" onclick="WriteHospInfoLog()" />
    <input type="button" value="写医院数据+黑名单校验" onclick="WriteHospInfoLocal()" /><hr/>
    服务端URL:
    <input type="text" name="URL" size="80" value="http://192.168.1.71/nh_webservice/n_api.asmx?op=nh_pipe" /><hr />
    注册WSDL路径:<input type="text" name="RegXML" size="80" value="http://192.168.1.67:8000/ccss/ws/oneCardWebService?wsdl" />
    <input type="button" value="卡校验" onclick="CardCheck()" />
    <input type="button" value="卡黑名单校验" onclick="CardForbiddenCheck()" /><hr />
    <input type="button" value="农合读卡(webservice)" onclick="NHRead()" />
    <input type="button" value="农合读卡+日志(webservice)" onclick="NHReadLog()" /><hr />
    <input type="button" value="农合只读卡" onclick="NHReadOnly()" />
    <input type="button" value="农合读卡+校验" onclick="NHReadLocal()" /><hr />
    <input type="button" value="HIS只读" onclick="ReadOnlyHIS()" />
    <input type="button" value="HIS读接口" onclick="ReadHIS()" />
    <input type="button" value="XJ读接口" onclick="ReadXJ()" /><hr />
    <input type="button" value="HIS只读+日志" onclick="ReadOnlyHISLog()" />
    <input type="button" value="HIS读接口+日志" onclick="ReadHISLog()" />
    <input type="button" value="XJ读接口+日志" onclick="ReadXJLog()" /><hr />
    <input type="button" value="HIS只读+黑名单校验" onclick="ReadOnlyHISLocal()" />
    <input type="button" value="HIS读接口+黑名单校验" onclick="ReadHISLocal()" />
    <input type="button" value="XJ读接口+黑名单校验" onclick="ReadXJLocal()" /><hr />
    读取的配置项:<input type="text" name="ConfigXML" />(注：1|2|3|4 对应 姓名|身份证号|出生日期|性别)<hr />
    <input type="button" value="读取配置数据" onclick="ReadConfigInfo()" />
    <input type="button" value="卡注册" onclick="CardRegister()" />
    <input type="button" value="卡注册+日志" onclick="CardRegisterLog()" /><hr />
    制卡数据选择:<input type="file" name="CardDataXML" />
    <input type="button" value="制卡" onclick="CreateCard()" /><hr />
    卡面数据选择:<input type="file" name="CardCoverDataXML" /><hr />
    卡面风格数据选择:<input type="file" name="CardCoverStyleXML" /><hr />
     打印机选择:<input type="button" value="获取打印机" onclick="GetPrinterList()" />
     <select id="PrinterList"></select><hr />
    <input type="button" value="打印卡面" onclick="PrintCard()" />
    <input type="button" value="制卡并打印卡面" onclick="PatchCard()" /><hr />
</body>
</html>
